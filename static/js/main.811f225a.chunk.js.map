{"version":3,"sources":["components/search.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","search","handleChange","bind","assertThisInitialized","e","setState","target","value","index","articles","indexOf","console","log","close","article","counter","keys","map","includes","length","_this2","query","matches","a","toUpperCase","push","react_default","createElement","match","key","onClick","setIndex","class","count","id","type","onChange","placeholder","searcher","className","React","Component","App","searching","data","localStorage","getItem","prevIndex","page","JSON","parse","dataStr","encodeURIComponent","stringify","downloadAnchorNode","document","setAttribute","body","appendChild","click","remove","i","setItem","alert","isChecked","Articles","cat","source","checked","values","splice","list","category","classify","check","status","_this3","components_search","triggerSearch","val","_this4","title","src","getUrl","save","download","level","nav","Categories","toString","prev","next","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.811f225a.chunk.js","sourcesContent":["import React from 'react';\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({search:e.target.value});\n  }\n  setIndex(value) {\n    let articles = this.props.articles['articles'];\n    var index = articles.indexOf(value);\n    console.log(index);\n    this.props.index(index);\n  }\n  close() {\n    this.props.close(false);\n  }\n  count(article) {\n    var counter = 0;\n    if (Object.keys(this.props.map).includes(article)) {\n      counter = this.props.map[article].length;\n    }\n    return counter;\n  }\n  searcher() {\n    let articles = this.props.articles['articles'];\n    let query = this.state.search;\n    var matches = [];\n    for (var a in articles) {\n      if (articles[a].toUpperCase().includes(query.toUpperCase())) {\n        matches.push(articles[a]);\n      }\n    }\n    return (\n      <ul>\n        {matches.map((match,index) => (\n          <li key={index} onClick={() => this.setIndex(match)}><span class='map-count'>{this.count(match)}</span>{match}</li>\n        ))}\n      </ul>\n    )\n  }\n  render() {\n    return (\n      <div id='map'>\n        <div>\n          <input type='text' value={this.state.search} onChange={this.handleChange} placeholder='I built this for you, Timothy...'></input>\n          {this.searcher()}\n          <i className='fas fa-times' id='close-map' onClick={this.props.close}></i>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport Articles from './data/articles.json';\nimport Categories from './data/categories.json';\nimport Search from './components/search.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      map: {},\n      searching: false\n    }\n    this.index = this.index.bind(this);\n  }\n  componentDidMount() {\n    var data = localStorage.getItem('kb-category-map');\n    var prevIndex = localStorage.getItem('kb-category-index');\n    if (data !== null && prevIndex !== null) {\n      var page = JSON.parse(prevIndex)['index'];\n      this.setState({map: JSON.parse(data), index: page});\n    }\n  }\n  download() {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.state.map));\n    var downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\",     dataStr);\n    downloadAnchorNode.setAttribute(\"download\", 'categorized.json');\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  }\n  save() {\n    var i = {'index': this.state.index}\n    localStorage.setItem('kb-category-map', JSON.stringify(this.state.map));\n    localStorage.setItem('kb-category-index', JSON.stringify(i));\n    alert('Saved! You can close this tab and pick up where you left off at any time.');\n  }\n  classify(target, value) {\n    if (target === 'previous' && this.state.index === 0) {\n      return 'shade'\n    }\n    if (target === 'checkbox' && this.isChecked(value)) {\n      return 'checked'\n    }\n  }\n  getUrl() {\n    var url = Articles['articles'];\n    return url[this.state.index];\n  }\n  isChecked(cat) {\n    let map = this.state.map;\n    let source = Articles['articles'];\n    var checked = false;\n    if (Object.keys(map).includes(source[this.state.index]) && Object.values(map[source[this.state.index]]).includes(cat)) {\n      checked = true;\n    }\n    return checked;\n  }\n  check(cat) {\n    let map = this.state.map;\n    let source = Articles['articles'];\n    if (!Object.keys(map).includes(source[this.state.index])) {\n      map[source[this.state.index]] = []\n      map[source[this.state.index]].push(cat)\n    } else if (Object.keys(map).includes(source[this.state.index]) && !Object.values(map[source[this.state.index]]).includes(cat)) {\n      map[source[this.state.index]].push(cat)\n    } else if (Object.keys(map).includes(source[this.state.index]) && Object.values(map[source[this.state.index]]).includes(cat)) {\n      var index = map[source[this.state.index]].indexOf(cat);\n      map[source[this.state.index]].splice(index, 1);\n    }\n    this.setState({map: map});\n  }\n  nav(list) {\n    return (\n      <tbody>\n        {list.map((category,index) => (\n          <tr key={index}>\n            <td className={this.classify('checkbox', category)} onClick={() => this.check(category)}><input type='checkbox' checked={this.isChecked(category)}></input>{category}</td>\n          </tr>\n        ))}\n      </tbody>\n    )\n  }\n  next() {\n    if (Articles['articles'].length - this.state.index !== 0) {\n      this.setState({index: this.state.index + 1});\n    }\n  }\n  prev() {\n    if (this.state.index !== 0) {\n      this.setState({index: this.state.index - 1});\n    }\n  }\n  triggerSearch(status) {\n    this.setState({searching: status});\n  }\n  search() {\n    if (this.state.searching) {\n      return (\n        <Search articles={Articles} map={this.state.map} close={() => this.triggerSearch(false)} index={this.index}/>\n      )\n    }\n  }\n  index(val) {\n    this.setState({index:val, searching:false});\n  }\n  render() {\n    const levels = ['Category 1', 'Category 2','Category 3'];\n    return (\n      <div id='main'>\n        <iframe id='preview' title='preview' src={'https://www.papercut.com/kb/' + this.getUrl()}></iframe>\n        <nav>\n          <div id='badges'>\n            <h4 onClick={() => this.triggerSearch(true)}>{Articles['articles'].length - this.state.index}</h4>\n            <h4 onClick={() => this.save()}><i className='far fa-save'></i></h4>\n            <h4 onClick={() => this.download()}><i className='fas fa-download'></i></h4>\n          </div>\n          <div id='categories'>\n            {levels.map((level,index) => (\n              <table key={index}>\n                <caption>{level}</caption>\n               {this.nav(Categories[index.toString()])}\n              </table>\n            ))}\n          </div>\n          <div id='crawler'>\n            <div>\n              <button className={this.classify('previous')} id='previous' onClick={() => this.prev()}>Previous</button>\n              <button id='next' onClick={() => this.next()}>Next</button>\n            </div>\n          </div>\n        </nav>\n        {this.search()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}